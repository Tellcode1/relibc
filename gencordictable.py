# Generates an arc tangent table with given number of entries and outputs it to a file .cordic_atan_table.h as a C header.
# The header contains a define _CORDIC_ATAN_TABLE_ENTRIES with the number of entries generated and the table size equal to it.
# The table is named _cordic_atan_table and is of type long double. The cordic gain is named _CORDIC_GAIN and is a define

import mpmath

def get_cordic_gain(n):
	K = mpmath.mpf(1)
	for i in range(n):
		K *= 1 / mpmath.sqrt(1 + mpmath.mpf(2) ** (-2 * i))
	return K

def main():
	num_entries = int(input("Enter the number of entries you would like to generate (Typically 64): "));

	# Set precision to 48 decimal places. 128 bit long doubles have 34 digits of precision but still.
	mpmath.mp.dps = 48

	if num_entries <= 0:
		print("Number of entries must be a non zero positive integer");
		return;

	with open('.cordic_atan_table.h', 'w') as f:
		f.write("/*\n\tTHIS FILE WAS GENERATED BY gencordictable.py\n");
		f.write("\tMODIFY THE SCRIPT. DO NOT MODIFY GENERATED FILE.\n*/\n");
		f.write("#include \"float.h\"\n");
		f.write(f"#define _CORDIC_ATAN_TABLE_ENTRIES {num_entries}\n");
		f.write(f"#define _CORDIC_GAIN {get_cordic_gain(num_entries)}L\n");

		# We don't need to compute the arc tangent in parallel, it's trivial
		atan_table = [mpmath.atan(2**-i) for i in range(num_entries)]
		f.write("static const ldouble_t _cordic_atan_table[_CORDIC_ATAN_TABLE_ENTRIES] = {\n");

		for entry in atan_table:
			# write with 48 digits of precision
			f.write(f"    {mpmath.nstr(entry, 48)},\n");

		f.write("};");

if __name__ == "__main__":
	main();